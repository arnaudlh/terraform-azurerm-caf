#
# Copyright (c) Microsoft Corporation
# Licensed under the MIT License.
#

name: test-mock-standalone-norover

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      scenario:
        description: "Select the scenario you want to run:"
        required: false
        type: choice
        default: "standalone-networking.json"
        options:
          - standalone-scenarios-azuread.json
          - standalone-scenarios.json
          - standalone-compute.json
          - standalone-networking.json
          - standalone-scenarios-longrunners.json

permissions:
  id-token: write
  contents: read

env:
  DEFAULT_SCENARIO: "standalone-networking.json"

jobs:

  linting_formatting:
    name: Format and Lint Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # - name: Install TFenv
      #   uses: rhythmictech/actions-setup-tfenv@v0.1.2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5


      - name: Install Terraform Linter
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.50.3

      - name: Intialize toolset
        run: |
          # tfenv init
          tflint --init

      - name: Terraform Format
        id: fmt
        run: |
          OUTPUT=$(terraform fmt -check -diff -recursive | tee /dev/fd/2 || true)
          OUTPUT=${OUTPUT//$'\n'/ }
          echo "terraform-fmt-output=${OUTPUT}" >> $GITHUB_OUTPUT

      - name: Run TFLint
        if: always()
        id: tflint
        run: |
          OUTPUT=$(tflint -f compact || true)
          OUTPUT=${OUTPUT//$'\n'/ } # Replace newline characters with spaces
          echo "::warning::${OUTPUT}"
          echo "tf-lint-output=${OUTPUT}" >> $GITHUB_OUTPUT

      # - name: Comment the PR with results of TFLint
      #   id: tflint_report
      #   uses: actions/github-script@v7
      #   if: always()
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   with:
      #     script: |
      #       const output = `${{ steps.tflint.outputs.tf-lint-output }}`.replace(/`/g, "\\`");
      #       const issue_number = context.issue.number
      #       await github.rest.issues.createComment({
      #         ...context.repo,
      #         issue_number,
      #         body: output
      #       })

  load_scenarios:
    name: Load Test Scenarios Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.load_scenarios.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: load_scenarios
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            cases=$(cat ./.github/workflows/${{ env.DEFAULT_SCENARIO }} | jq -c .)
          else
            cases=$(cat ./.github/workflows/${{ github.event.inputs.scenario }} | jq -c .)
          fi
          echo "matrix=${cases}" >> $GITHUB_OUTPUT

  mock_plan_scenarios:
    name: Test Mock Plan Scenarios
    runs-on: ubuntu-latest
    needs: load_scenarios

    strategy:
      fail-fast: false
      matrix: ${{fromJSON(needs.load_scenarios.outputs.matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create environment variables
        run: |
          cd ${GITHUB_WORKSPACE}/examples/${{ matrix.config_files }}
          FILE_NAME=$(echo ${{ matrix.config_files }} | sed 's./..g' | xargs)
          echo STATE_FILE=${TF_DATA_DIR}/tfstates/${FILE_NAME}.tfstate  >> $GITHUB_ENV
          echo PLAN_FILE=${TF_DATA_DIR}/tfstates/${FILE_NAME}.plan >> $GITHUB_ENV
          echo CURRENT_FOLDER=${GITHUB_WORKSPACE}/examples/${{ matrix.config_files }} >> $GITHUB_ENV
          echo PARAMETER_FILES=$(find ${GITHUB_WORKSPACE}/examples/${{ matrix.config_files }} | grep .tfvars | sed 's/.*/-var-file=&/' | xargs) >> $GITHUB_ENV

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Configure Terraform plugin cache
        run: |
          echo "TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache" >>"$GITHUB_ENV"
          mkdir --parents "$HOME/.terraform.d/plugin-cache"

      - name: Cache Terraform
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init example
        # if: steps.cache.outputs.cache-hit != 'true'
        id: tf_init
        run: |
          terraform -chdir=examples \
          init

      - name: Terraform Test example
        id: tf_test
        run: |
          terraform -chdir=examples \
          test \
          -test-directory=./tests/mock \
          ${{ env.PARAMETER_FILES }} \
          -verbose

  terraform_plan:
    runs-on: ubuntu-latest
    name: Integration Tests Plan
    needs: load_scenarios
    
    strategy:
      fail-fast: false
      matrix: ${{fromJSON(needs.load_scenarios.outputs.matrix)}}

    environment:
      name: 'integration'
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create environment variables
        run: |
          cd ${GITHUB_WORKSPACE}/examples/${{ matrix.config_files }}
          FILE_NAME=$(echo ${{ matrix.config_files }} | sed 's./..g' | xargs)
          echo STATE_FILE=${TF_DATA_DIR}/tfstates/${FILE_NAME}.tfstate  >> $GITHUB_ENV
          echo PLAN_FILE=${TF_DATA_DIR}/tfstates/${FILE_NAME}.plan >> $GITHUB_ENV
          echo CURRENT_FOLDER=${GITHUB_WORKSPACE}/examples/${{ matrix.config_files }} >> $GITHUB_ENV
          echo PARAMETER_FILES=$(find ${GITHUB_WORKSPACE}/examples/${{ matrix.config_files }} | grep .tfvars | sed 's/.*/-var-file=&/' | xargs) >> $GITHUB_ENV

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Configure Terraform plugin cache
        run: |
          echo "TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache" >>"$GITHUB_ENV"
          mkdir --parents "$HOME/.terraform.d/plugin-cache"

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init example
        id: tf_init
        run: |
          terraform -chdir=${GITHUB_WORKSPACE}/examples \
          init -upgrade=true | grep -P '^- (?=Downloading|Using|Finding|Installing)|^[^-]'
  
      - name: Terraform Plan example
        id: tf_plan
        run: |
          terraform -chdir=${GITHUB_WORKSPACE}/examples \
            plan \
            ${{ env.PARAMETER_FILES }} \
            -var tags='{testing_job_id='"${{ github.run_id }}"'}' \
            -var var_folder_path=${{ env.CURRENT_FOLDER }} \
            -refresh=true \
            -input=false \
            -state=${{ env.STATE_FILE }} \
            -out=${{ env.PLAN_FILE }}
#
# Copyright (c) Microsoft Corporation
# Licensed under the MIT License.
#

name: test-mock-standalone

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      scenario:
        description: "Select the scenario you want to run:"
        required: false
        type: choice
        default: "standalone-scenarios.json"
        options:
          - standalone-scenarios-azuread.json
          - standalone-scenarios.json
          - standalone-compute.json
          - standalone-networking.json
          - standalone-scenarios-longrunners.json

env:
  TF_CLI_ARGS: "-no-color"
  TF_CLI_ARGS_destroy: "-auto-approve -refresh=false"
  ROVER_RUNNER: true
  DEFAULT_SCENARIO: "standalone-scenarios.json"

jobs:
  load_scenarios:
    name: Load scenarios
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.load_scenarios.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: load_scenarios
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            cases=$(cat ./.github/workflows/${{ env.DEFAULT_SCENARIO }} | jq -c .)
          else
            cases=$(cat ./.github/workflows/${{ github.event.inputs.scenario }} | jq -c .)
          fi
          echo "matrix=${cases}" >> $GITHUB_OUTPUT

  mock_plan_scenarios:
    name: Test Mock Plan Scenarios
    runs-on: ubuntu-latest
    needs: load_scenarios

    strategy:
      max-parallel: 1
      fail-fast: false
      matrix: ${{fromJSON(needs.load_scenarios.outputs.matrix)}}

    container:
      image: aztfmod/rover:1.7.5-2403.1406
      options: --user 0

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Create environment variables
        run: |
          cd ${GITHUB_WORKSPACE}/examples/${{ matrix.config_files }}
          FILE_NAME=$(echo ${{ matrix.config_files }} | sed 's./..g' | xargs)
          echo STATE_FILE=${TF_DATA_DIR}/tfstates/${FILE_NAME}.tfstate  >> $GITHUB_ENV
          echo PLAN_FILE=${TF_DATA_DIR}/tfstates/${FILE_NAME}.plan >> $GITHUB_ENV
          echo CURRENT_FOLDER=${GITHUB_WORKSPACE}/examples/${{ matrix.config_files }} >> $GITHUB_ENV
          echo PARAMETER_FILES=$(find ${GITHUB_WORKSPACE}/examples/${{ matrix.config_files }} | grep .tfvars | sed 's/.*/-var-file=&/' | xargs) >> $GITHUB_ENV
      
      - name: Install Node
        run: |
          apt-get update && \
          apt-get install -y curl && \
          curl -sL https://deb.nodesource.com/setup_20.x | bash - && \
          apt-get install -y nodejs

      - name: Create Cache Terraform
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            /tf/cache
            /home/vscode/.terraform.cache/modules
            /home/vscode/.terraform.cache/plugin-cache
            /home/vscode/.terraform.cache/providers
          key:  ${{ runner.os }}-terraform-

      - name: Terraform Init example
        # if: steps.cache.outputs.cache-hit != 'true'
        id: tf_init
        run: |
          terraform init

      - name: Debug
        run: |
          # pwd
          # ls -lsa examples
          # ls -lsa /tf/cache/registry.terraform.io
          # ls -lsa /home/vscode/.terraform.cache
          # ls -lsa /home/vscode/.terraform.cache/modules
          # cat /home/vscode/.terraform.cache/modules/modules.json
          # ls -lsa /home/vscode/.terraform.cache/plugin-cache
          # ls -lsa /home/vscode/.terraform.cache/providers/registry.terraform.io
          find / -type d -name "modules"
          find / -type d -name ".terraform"

      # - name: Save Cache Terraform
      #   if: always()
      #   id: savecache
      #   uses: actions/cache/save@v4
      #   with:
      #     path: |
      #       /tf/cache
      #       /home/vscode/.terraform.cache/modules
      #       /home/vscode/.terraform.cache/plugin-cache
      #       /home/vscode/.terraform.cache/providers
      #     key:  ${{ runner.os }}-terraform-

      # - name: Terraform Test example
      #   id: tf_test
      #   run: |
      #     terraform -chdir=examples \
      #     test \
      #     -test-directory=./tests/mock \
      #     ${{ env.PARAMETER_FILES }} \
      #     -verbose

